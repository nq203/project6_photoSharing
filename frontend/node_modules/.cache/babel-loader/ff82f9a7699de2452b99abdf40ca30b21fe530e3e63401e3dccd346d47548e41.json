{"ast":null,"code":"var _jsxFileName = \"/home/quan/photo_sharing_mongoDB/frontend/src/components/UserPhotos/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport fetchModel from \"../../lib/fetchModelData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserPhotos() {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [photos, setPhotos] = useState([]); // State to store the list of users\n\n  useEffect(() => {\n    const fetchUserList = async () => {\n      try {\n        const data = await fetchModel(\"photo/\" + userId);\n        setPhotos(data);\n      } catch (error) {\n        console.error(\"Error fetching user list:\", error);\n      }\n    };\n    fetchUserList();\n  }, [userId]);\n  if (photos) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: [\"User Photos for User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: photos.map(photo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Time: \", photo.date_time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this)]\n      }, photo._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this);\n}\n_s(UserPhotos, \"ilFOEtI0dWeOWjiFqBIAqwRhilM=\", false, function () {\n  return [useParams];\n});\n_c = UserPhotos;\nexport default UserPhotos;\nvar _c;\n$RefreshReg$(_c, \"UserPhotos\");","map":{"version":3,"names":["React","useState","useEffect","Typography","useParams","fetchModel","jsxDEV","_jsxDEV","UserPhotos","_s","userId","photos","setPhotos","fetchUserList","data","error","console","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","map","photo","date_time","_id","_c","$RefreshReg$"],"sources":["/home/quan/photo_sharing_mongoDB/frontend/src/components/UserPhotos/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport fetchModel from \"../../lib/fetchModelData\";\nfunction UserPhotos() {\n  const { userId } = useParams();\n  const [photos, setPhotos] = useState([]); // State to store the list of users\n\n  useEffect(() => {\n    const fetchUserList = async () => {\n      try {\n        const data = await fetchModel(\"photo/\" + userId);\n        setPhotos(data);\n      } catch (error) {\n        console.error(\"Error fetching user list:\", error);\n      }\n    };\n\n    fetchUserList();\n  }, [userId]);\n  if (photos)\n    return (\n      <div>\n        <Typography variant=\"body1\">\n          User Photos for User ID: {userId}\n        </Typography>\n        <div>\n          {photos.map((photo) => (\n            <div key={photo._id}>\n              {/* <img src={\"/images/\" + photo.file_name} /> */}\n              <Typography variant=\"body2\">Time: {photo.date_time}</Typography>\n              <Typography variant=\"h6\">Comments</Typography>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n}\n\nexport default UserPhotos;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMT,UAAU,CAAC,QAAQ,GAAGK,MAAM,CAAC;QAChDE,SAAS,CAACE,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDF,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EACZ,IAAIC,MAAM,EACR,oBACEJ,OAAA;IAAAU,QAAA,gBACEV,OAAA,CAACJ,UAAU;MAACe,OAAO,EAAC,OAAO;MAAAD,QAAA,GAAC,2BACD,EAACP,MAAM;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACbf,OAAA;MAAAU,QAAA,EACGN,MAAM,CAACY,GAAG,CAAEC,KAAK,iBAChBjB,OAAA;QAAAU,QAAA,gBAEEV,OAAA,CAACJ,UAAU;UAACe,OAAO,EAAC,OAAO;UAAAD,QAAA,GAAC,QAAM,EAACO,KAAK,CAACC,SAAS;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC,eAChEf,OAAA,CAACJ,UAAU;UAACe,OAAO,EAAC,IAAI;UAAAD,QAAA,EAAC;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAA,GAHtCE,KAAK,CAACE,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ;AAACb,EAAA,CAjCQD,UAAU;EAAA,QACEJ,SAAS;AAAA;AAAAuB,EAAA,GADrBnB,UAAU;AAmCnB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}